class Solution {
    public int findKthLargest(int[] nums, int k) {
        
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        
        for(int i=0; i<k; i++)
            pq.add(nums[i]);
        
        for(int i=k; i<nums.length; i++) {
            if ( nums[i] > pq.peek() ) { // Replace root with current elem if root is smaller
                pq.poll();
                pq.add(nums[i]);
            }
        }
        
        return pq.peek(); // The min (root) is offset and ends up being k
    }
}
